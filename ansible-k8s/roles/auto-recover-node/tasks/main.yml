---
- name: Garantir que containerd e kubelet iniciem com o sistema
  ansible.builtin.systemd:
    name: "{{ item }}"
    enabled: yes
    state: started
  loop:
    - containerd
    - kubelet

- name: Copiar script de auto-recuperação do kubelet
  ansible.builtin.copy:
    src: kubelet-auto-recover.sh
    dest: /usr/local/bin/kubelet-auto-recover.sh
    mode: '0755'

- name: Criar serviço systemd para auto-recuperação do kubelet
  ansible.builtin.copy:
    dest: /etc/systemd/system/kubelet-auto-recover.service
    content: |
      [Unit]
      Description=Auto recover kubelet if node is NotReady
      After=network.target

      [Service]
      Type=simple
      ExecStart=/usr/local/bin/kubelet-auto-recover.sh
      Restart=always
      RestartSec=15
      StandardOutput=append:/var/log/kubelet-auto-recover.log
      StandardError=append:/var/log/kubelet-auto-recover.log

      [Install]
      WantedBy=multi-user.target

- name: Habilitar e iniciar serviço de auto-recuperação
  ansible.builtin.systemd:
    name: kubelet-auto-recover
    enabled: yes
    state: started

# -------------------------
# BLOCO DE RESET E REJOIN (APENAS WORKERS)
# -------------------------

- name: Parar kubelet e containerd (apenas workers)
  ansible.builtin.systemd:
    name: "{{ item }}"
    state: stopped
  loop:
    - kubelet
    - containerd
  ignore_errors: yes
  when: inventory_hostname not in groups['k8s-master']

- name: Resetar node para limpar cluster antigo (apenas workers)
  ansible.builtin.command: kubeadm reset -f
  ignore_errors: yes
  when: inventory_hostname not in groups['k8s-master']

- name: Limpar diretórios residuais do Kubernetes (apenas workers)
  ansible.builtin.file:
    path: "{{ item }}"
    state: absent
  loop:
    - /etc/kubernetes
    - /var/lib/kubelet
  ignore_errors: yes
  when: inventory_hostname not in groups['k8s-master']

- name: Subir containerd novamente (apenas workers)
  ansible.builtin.systemd:
    name: containerd
    state: started
    enabled: yes
  when: inventory_hostname not in groups['k8s-master']

- name: Criar token de join no master
  delegate_to: "{{ groups['k8s-master'][0] }}"
  run_once: true
  register: join_cmd
  changed_when: false
  command: kubeadm token create --print-join-command
  when: inventory_hostname not in groups['k8s-master']

- name: Executar kubeadm join no worker
  ansible.builtin.shell: "{{ join_cmd.stdout }} --ignore-preflight-errors=Swap"
  register: join_result
  changed_when: true
  when: inventory_hostname not in groups['k8s-master']
